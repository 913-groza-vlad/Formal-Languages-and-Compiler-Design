N = { program, declaration_stmt, decllist, decl, declaration, id_declaration, array_declaration, type, constlist, const_declaration, constant, term, cmpdstmt, expression, int_expression, arithmetic_symbol, string_expression, stmt, simplestmt, structstmt, assignstmt, equal_and_symbol, cmpdassignstmt, iostmt, readstmt, writestmt, ifstmt, stmt_body, elsestmt, whilestmt, forstmt, for_assignment, condition, RELATION }
E = { +, -, *, /, <-, ->, >>, <<, ==, !!, >>=, <<=, =+, =-, =*, =/, =, and, or, \, /, ~, ;, :, (, ), {, }, [, ], def, int, string, whether, otherwise, Array, whileLoop, forLoop, const, input, out, identifier, intconstant, stringconstant }
S = program
P = {
program -> { cmpdstmt }
declaration_stmt -> decllist | constlist
decllist -> def decl
decl -> declaration ; decllist | epsilon
declaration -> id_declaration | array_declaration
id_declaration -> identifier : type
array_declaration -> identifier [ intconstant ] : Array ( type )
type -> int | string
constlist -> const const_declaration constlist | epsilon
const_declaration -> identifier <- constant
constant -> intconstant | stringconstant
term -> constant | identifier
cmpdstmt -> stmt cmpdstmt | epsilon
expression -> int_expression | string_expression
int_expression -> intconstant | identifier | int_expression arithmetic_symbol int_expression | ( int_expression arithmetic_symbol int_expression ) | epsilon
arithmetic_symbol -> + | - | * | /
string_expression -> stringconstant | identifier | string_expression + string_expression | epsilon
stmt -> declaration_stmt ~ | simplestmt ~ | structstmt
simplestmt -> assignstmt | iostmt | cmpdassignstmt
structstmt -> ifstmt | whilestmt | forstmt
assignstmt -> identifier <- expression
equal_and_symbol -> =+ | =- | =* | =/
cmpdassignstmt -> identifier equal_and_symbol expression
iostmt -> readstmt | writestmt
readstmt -> term <- input ( )
writestmt -> term -> out ( )
ifstmt -> whether ( condition ) stmt_body otherwise elsestmt
elsestmt -> otherwise stmt_body | epsilon
stmt_body -> \ stmt / | stmt
whilestmt -> whileLoop ( condition ) stmt_body
forstmt -> forLoop ( assignstmt ; condition ; for_assignment ) stmt_body
for_assignment -> assignstmt | cmpdassignstmt
condition -> expression RELATION expression
RELATION -> << | <<= | == | !! | >>= | >> | and | or
}
